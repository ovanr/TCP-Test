{-
TorXakis - TCP Model Based Testing
-}

-- ----------------------------------------------------------------------------------------- --

TYPEDEF TCPFlag ::= SYN | ACK | FIN | RST ENDDEF
TYPEDEF SEQ ::= SEQ_VALID | SEQ_INVALID ENDDEF
TYPEDEF ACK ::= ACK_VALID | ACK_INVALID ENDDEF

-- ascending alphabetical order is implied
TYPEDEF TCPFlagList ::=   
    NIL
    | CONS  { hd :: TCPFlag ; tl :: TCPFlagList }
ENDDEF

TYPEDEF TCPUserCallInput ::= 
    LISTEN { lport :: Int }
    | CONNECT { csport :: Int; cdport :: Int }
    | SEND { spayload :: String }
    | RECEIVE 
    | CLOSE
ENDDEF
TYPEDEF TCPUserCallOutput ::= 
    SUCCESS
    | FAILURE
    | RECEIVE { rpayload :: String }
ENDDEF

TYPEDEF TCPPacket ::= TCPPacket { 
        sport :: Int;
        dport :: Int;
        seq :: SEQ;
        ack :: ACK;
        flags :: TCPFlagList;
        payload :: String
    } 
ENDDEF

-- ----------------------------------------------------------------------------------------- --

CHANDEF  Channels  ::=    InSutNet   :: TCPPacket; 
                          OutSutNet   :: TCPPacket; 
                          InSutUser   :: TCPUserCallInput; 
                          OutSutUser   :: TCPUserCallOutput
ENDDEF

-- ----------------------------------------------------------------------------------------- --

FUNCDEF isValidString ( x :: String ) :: Bool ::=
    strinre (x, REGEX('[A-Za-z]{0,50}')) 
ENDDEF

FUNCDEF isListenUserCall ( c :: TCPUserCallInput ) :: Bool ::=
    IF isLISTEN(c) THEN
        (lport(c) > 10000) /\ (lport(c) < 12000)
    ELSE
        False
    FI
ENDDEF

FUNCDEF isConnectUserCall ( c :: TCPUserCallInput ) :: Bool ::=
    IF isCONNECT(c) THEN
        (cdport(c) > 10000) /\ 
        (cdport(c) < 12000) /\
        (csport(c) > 10000) /\ 
        (csport(c) < 12000)
    ELSE
        False
    FI
ENDDEF

FUNCDEF isSyn ( t :: TCPPacket ) :: Bool ::=
    (flags(t) == CONS(SYN, NIL)) /\
    (payload(t) == "") /\
    (seq(t) == SEQ_VALID) /\
    (ack(t) == ACK_VALID) /\
    (sport(t) > 10000) /\ 
    (sport(t) < 12000)
ENDDEF

FUNCDEF isSynAck ( t :: TCPPacket ) :: Bool ::=
    (flags(t) == CONS(ACK, CONS(SYN, NIL))) /\
    (payload(t) == "") /\
    (seq(t) == SEQ_VALID) /\
    (ack(t) == ACK_VALID)
ENDDEF

FUNCDEF isAck ( t :: TCPPacket ) :: Bool ::=
    (flags(t) == CONS(ACK, NIL)) /\
    (seq(t) == SEQ_VALID) /\
    (ack(t) == ACK_VALID) /\
    (payload(t) == "")
ENDDEF

FUNCDEF isFinAck ( t :: TCPPacket ) :: Bool ::=
    (flags(t) == CONS(ACK, CONS(FIN, NIL))) /\
    (seq(t) == SEQ_VALID) /\
    (ack(t) == ACK_VALID) /\
    (payload(t) == "")
ENDDEF

FUNCDEF synack ( sport :: Int; dport :: Int ) :: TCPPacket ::=
    TCPPacket(sport, dport, SEQ_VALID, ACK_VALID, CONS(ACK, CONS(SYN, NIL)), "")
ENDDEF

FUNCDEF syn ( sport :: Int; dport :: Int ) :: TCPPacket ::=
    TCPPacket(sport, dport, SEQ_VALID, ACK_VALID, CONS(SYN, NIL), "")
ENDDEF

FUNCDEF ack ( sport :: Int; dport :: Int ) :: TCPPacket ::=
    TCPPacket(sport, dport, SEQ_VALID, ACK_VALID, CONS(ACK, NIL), "")
ENDDEF

FUNCDEF finack ( sport :: Int; dport :: Int ) :: TCPPacket ::=
    TCPPacket(sport, dport, SEQ_VALID, ACK_VALID, CONS(ACK, CONS(FIN, NIL)), "")
ENDDEF

-- ----------------------------------------------------------------------------------------- --

PROCDEF sutPassiveOpen 
        [ InSutNet :: TCPPacket; OutSutNet :: TCPPacket; InSutUser :: TCPUserCallInput; OutSutUser :: TCPUserCallOutput ] 
        ()
        EXIT Int # Int
   ::=
            InSutUser ? c [[ isListenUserCall(c) ]] 
        >->
            InSutNet ? s [[ (dport(s) == lport(c)) /\ isSyn(s) ]] 
        >->
            OutSutNet ! synack(dport(s), sport(s)) 
        >->
            InSutNet ? a [[ isAck(a) /\ (sport(a) == sport(s)) /\ (dport(a) == dport(s)) ]] 
        >->
            OutSutUser ! SUCCESS
        >->
            EXIT ! dport(s) ! sport(s)
ENDDEF

-- the sut enters active mode (Initiates a new connection)
PROCDEF sutActiveOpen 
        [ InSutNet :: TCPPacket; OutSutNet :: TCPPacket; InSutUser :: TCPUserCallInput; OutSutUser :: TCPUserCallOutput ] 
        ()
        EXIT Int # Int
	::=
	    InSutUser ? c [[ isConnectUserCall(c) ]]
    >-> 
	    OutSutNet ! syn(csport(c), cdport(c)) 
    >->
	    InSutNet ? sa [[ (sport(sa) == cdport(c)) /\ (dport(sa) == csport(c)) /\ isSynAck(sa) ]] 
    >->
        (   
            (
                (
                        OutSutNet ! ack(csport(c), cdport(c)) 
                    >-> 
                        EXIT ! csport(c) ! cdport(c)
                )
            ||| 
                (
                        OutSutUser ! SUCCESS
                    >-> 
                        EXIT ! csport(c) ! cdport(c)
                )
            )
        )
ENDDEF

PROCDEF tsCloseEnd
        [ InSutNet :: TCPPacket; OutSutNet :: TCPPacket; InSutUser :: TCPUserCallInput; OutSutUser :: TCPUserCallOutput ] 
        (src_port, dst_port :: Int) 
        EXIT 
    ::=
        InSutNet ? f [[ (sport(f) == dst_port) /\ (dport(f) == src_port) /\ isFinAck(f) ]]
    >-> 
        OutSutNet ! ack(src_port, dst_port)
    >->
        EXIT
ENDDEF

PROCDEF sutCloseEnd
        [ InSutNet :: TCPPacket; OutSutNet :: TCPPacket; InSutUser :: TCPUserCallInput; OutSutUser :: TCPUserCallOutput ] 
        (src_port, dst_port :: Int) 
        EXIT 
    ::=
        InSutUser ! CLOSE
    >->
        (
	        (
                    OutSutNet ! finack(src_port, dst_port) 
                >->
	                InSutNet ? a [[ (sport(a) == dst_port) /\ (dport(a) == src_port) /\ isAck(a) ]]
                >->
                    EXIT
            )
        |||
            (
	                OutSutUser ! SUCCESS
                >-> 
                    EXIT
            )
        )
ENDDEF

PROCDEF sutPassiveActiveClose 
        [ InSutNet :: TCPPacket; OutSutNet :: TCPPacket; InSutUser :: TCPUserCallInput; OutSutUser :: TCPUserCallOutput ] 
        (src_port, dst_port :: Int) 
        EXIT 
    ::=
        (
                sutCloseEnd [ InSutNet, OutSutNet, InSutUser, OutSutUser ] (src_port, dst_port)
            |||
                tsCloseEnd [ InSutNet, OutSutNet, InSutUser, OutSutUser ] (src_port, dst_port)
        )
        >>>
            EXIT
ENDDEF

PROCDEF tcpBehavior 
        [ InSutNet :: TCPPacket; OutSutNet :: TCPPacket; InSutUser :: TCPUserCallInput; OutSutUser :: TCPUserCallOutput ] 
        ()
   ::=
    (   
            sutPassiveOpen [ InSutNet, OutSutNet, InSutUser, OutSutUser ] () 
        ##
            sutActiveOpen [ InSutNet, OutSutNet, InSutUser, OutSutUser ] () 
    )
    >>> ACCEPT ? src_port ? dst_port 
        IN
                sutPassiveActiveClose [ InSutNet, OutSutNet, InSutUser, OutSutUser ] ( src_port, dst_port )
            >>>
                tcpBehavior [ InSutNet, OutSutNet, InSutUser, OutSutUser ] () 
        NI
ENDDEF

-- ----------------------------------------------------------------------------------------- --

MODELDEF Tcp
   ::=
        CHAN IN    InSutNet, InSutUser
        CHAN OUT   OutSutNet, OutSutUser

        BEHAVIOUR tcpBehavior [ InSutNet, OutSutNet, InSutUser, OutSutUser ] () 
ENDDEF


-- ----------------------------------------------------------------------------------------- --

CNECTDEF  Sut
   ::=
        CLIENTSOCK

        CHAN  OUT  InSutNet                     HOST "localhost"  PORT 2986
        ENCODE     InSutNet ? x                 ->  ! toString(x)

        CHAN  IN   OutSutNet                    HOST "localhost"  PORT 2986
        DECODE     OutSutNet ! fromString(s)    <-  ? s

        CHAN  OUT  InSutUser                    HOST "192.168.1.146"  PORT 3022
        ENCODE     InSutUser ? t                ->  ! toString(t)

        CHAN  IN   OutSutUser                   HOST "192.168.1.146"  PORT 3022
        DECODE     OutSutUser ! fromString(m)   <-  ? m
ENDDEF

-- ----------------------------------------------------------------------------------------- --
-- ----------------------------------------------------------------------------------------- --

